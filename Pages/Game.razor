@page "/"
@inject BlazorGame.Data.GameSessionService _sessionService
@inject IJSRuntime JS

@if (currentSession == null)
{
    <h3>Start a new game</h3>

    <EditForm Model="@startGameModel" OnValidSubmit="@OnEnterGame">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username" class="font-weight-bold mr-2">Game Mode</label>
            <small id="mode-help" class="form-text text-muted">Start a new game or join an existing one.</small>
            <InputRadioGroup Name="gameMode" @bind-Value="startGameModel.Mode" class="form-control">
                <InputRadio Name="gameMode" Value="JoinMode.CreateNew" class="mr-2" />Create New
                <InputRadio Name="gameMode" Value="JoinMode.JoinExisting" class="mx-2" />Join Existing<br>
            </InputRadioGroup>
        </div>

        <hr />

        <div class="form-row align-items-center">
            <div class="col-auto">
                <label for="username" class="font-weight-bold mr-2">Username</label>
                <input type="text" class="form-control" id="username-input" aria-describedby="username-help" @bind-value="startGameModel.Username">
                <small id="username-help" class="form-text text-muted">Enter a short username.</small>
            </div>
            <div class="col-auto">
                <label for="pin-input" class="font-weight-bold mr-2">PIN</label>
                <input type="number" class="form-control" id="pin-input" aria-describedby="pin-help" maxlength="4" @bind-value="startGameModel.PINCode">
                <small id="pin-help" class="form-text text-muted">Enter a 4-digit PIN code for this game.</small>
            </div>
            <div class="col-auto">
                <button type="submit" id="join-button" class="btn btn-primary mb-2">Go!</button>
            </div>
        </div>
    </EditForm>

}
else
{
    <h1>Game Code: @currentSession.PinCode</h1>
    <button type="button" class="btn btn-warning mb-2" @onclick="OnLeaveGame">Leave Game</button>
    <button type="button" id="refresh-button" style="display: none" @onclick="OnRefreshGame"></button>

    if (currentPlayers.Any())
    {
        <h3>Players</h3>
        <ul>
            @foreach (var player in currentPlayers)
            {
                <li>@player.Name</li>
            }
        </ul>
    }
}

@code {
    StartGameModel startGameModel = new();
    PlayerSessionModel? currentSession = null;
    List<Player> currentPlayers = new();

    private async Task OnEnterGame()
    {
        var connectionId = await JS.InvokeAsync<string>("Game.GetConnectionId");

        if (startGameModel.Mode == JoinMode.CreateNew)
        {
            currentSession = await _sessionService.CreateGame(connectionId, startGameModel.Username, startGameModel.PINCode);
        }
        else
        {
            currentSession = await _sessionService.JoinGame(connectionId, startGameModel.Username, startGameModel.PINCode);
        }

        if (currentSession != null)
        {
            currentPlayers = await _sessionService.GetPlayers(currentSession.PinCode);
            startGameModel = new();
        }
    }

    private async Task OnLeaveGame()
    {
        if (currentSession != null)
        {
            var connectionId = await JS.InvokeAsync<string>("Game.GetConnectionId");
            await _sessionService.LeaveGame(connectionId, currentSession.PinCode);
            startGameModel = new();
            currentSession = null;
        }
    }

    private async Task OnRefreshGame()
    {
        var connectionId = await JS.InvokeAsync<string>("Game.GetConnectionId");
        if (currentSession != null)
        {
            currentPlayers = await _sessionService.GetPlayers(currentSession.PinCode);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("StartTimer");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
